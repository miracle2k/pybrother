#!/usr/bin/env python3
"""
Test suite for Brother label printer PNG generation and binary output
Uses inline snapshots to ensure layout consistency
"""

import pytest
from inline_snapshot import snapshot
import base64
import io
from PIL import Image

from brother_printer import (
    create_label_png, 
    png_to_bw_matrix, 
    convert_to_brother_raster,
    TAPE_SPECS
)


def png_to_b64(png_image):
    """Convert PIL Image to base64 string for snapshot comparison"""
    buffer = io.BytesIO()
    png_image.save(buffer, format='PNG')
    return base64.b64encode(buffer.getvalue()).decode('utf-8')


def binary_to_b64(binary_data):
    """Convert binary data to base64 string for snapshot comparison"""
    return base64.b64encode(binary_data).decode('utf-8')


class TestPNGGeneration:
    """Test PNG generation with various parameters"""
    
    def test_basic_6mm_black_tape(self):
        """Test basic 6mm black tape with default settings"""
        png, spec = create_label_png("Test", 40, "W6", 10, white_tape=False)
        
        # Verify PNG dimensions and content
        assert png.size[1] == 32  # 6mm = 32 pins
        assert spec["mm"] == 6
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('iVBORw0KGgoAAAANSUhEUgAAAFwAAAAgCAAAAAC6ZEA+AAACiUlEQVR4nOWWWUiUYRSGH7cZzUxNaXMhFEkvDEIoqNCsRKmMvAkSLxSSii6ixTbsxgspA4tAckFULLsIg6AgRFIioSwDW8hcKIMSI1HBRsvl7WJmnMkZlRk1iN6r77znP893/o/v/PzwVxQkp7rlCsP/z9BzEdvzOXt/yeCJ7VeWLxn8YtxMxwYf8rCqBoizBlkL2G4xz/w/gxuy6rqGRz83nFllZ+4qax/89e1teYYXAPukVNgi6cDcsGpJsbYw46N1oEYuWXsJb5meso6dFrhFLsHzp+zm9YEvACG9dt7YbrfhOZJGijYHGKOP9UiqBKBSUuW2YO/V22sldXkD8Eh6Njd4JjzCJHVHm9fL7klKA4wmqcjywAVJe9yEF0tjG6wJY6f0BIiRlGzxDN+lq+7BPQakGlvmpKQ1sFZSrcfMMkf4PFcxfiU02cKnQCL09ULWiyPR83U5D3wTUGW7GK1AFHAZSCjt7q3KDF0A3EltCFB6DYDI7Nv9LSdC3IUHOVp+AKdSmmWu33q95+hs1d5zw01A7AcnicbGdelpScEAgTe9SpxXz9P5AOZDdqKvZRmhCacbJoDCILfgHUDyrNmpV8Wp61thRZJb8OdjkGmY6dZJ7db1lzwgAkCuwn/WQ9j56bBAUgo0w8Z4e8IgwBQ4DJaj7Mc/flKazLUEhyakd54Q9ENqCzR7hkZpIgzgrtTlGpx8SXq4N8QQnl4vaTzR+ga9x2N8fcIOvpRUAUCJpFxjVKQLcI8S+/+v8WwAjI/tzSd+ABw2R3kuwCGnbxrzfofF86+w7XcjwOwZ2yRJ1S7B8cu+0zk0MfS6ar/dyMUWNveNmj41nbN9vvwL3gyP95fPDf839Bu/UKMBaUfQuQAAAABJRU5ErkJggg==')
    
    def test_basic_6mm_white_tape(self):
        """Test basic 6mm white tape with black text"""
        png, spec = create_label_png("Test", 40, "W6", 10, white_tape=True)
        
        # Verify PNG dimensions and content
        assert png.size[1] == 32  # 6mm = 32 pins
        assert spec["mm"] == 6
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('iVBORw0KGgoAAAANSUhEUgAAAFwAAAAgCAAAAAC6ZEA+AAACo0lEQVR4nOWWW0iUURDHf9+6qKuRiWBWoJGKEoZgpNCFlMSoHqILFCaYYnmJoAvSBewhQUS7EESUgRaI0UtWKiUiokbggwT6YIRGqYXEqpuou7qs08NeXXf92LXtpXma+X8zv3O+OYfhKELgTOPwDIpHy/OFNucNvnYz1xwNGLwn9dpswOBVQ+6KE75B7JYPDNmDxjUs9zd7/p/BFxtzEyN0sTl3frmIncWpkcHRKeebLQC0Kko79CmK8tolSVbasgMVebXVnht+22LTxnY7AEmdIiItjrjZWakOr1RctnLEKCIi+lgXLaTDb3g9EF7eN2MafrQNKBQRkUKg8MOUeaI3D0gwi4jIQchYDlKDj+ogftjqzx0D3omISQfltoQqoM0LXO1A7xsJaYu3+mEvEqEKGDXCIVvC1Sjo8lKsApfncCrJ0d1S6J2AdUC9bVYH60Vq/YMPTkGWM9wL9MCmOGjc9WRk9VpV+CegwDnc04GvwHWgvyQhrqBJvwa4h9pJoOQyAKPPzmzc82DSX7hhpWQEuNeRab3+Sx8vxT/2Vq1dHR4GfE7y8CE7+2fL++5pgN+llgueq1V2HoW1yR5sc3Gzvv9ujha4afALnoz3WwyatCvt39JhptsveEYoNC26q7mKkmr3t9QCYwCKe5oaPOQE/Kh2hLcURemATBgYtGtLQKQN5f4IUpktAxrQ1NmCpiDYbhGZDoM0g1VbOABB4yIiJyHBt8EllQCHW/ULY2+PA9puEZEKIPbhF+Pi+MudQJGIiJQBdaaR7z7Al8pc/1PbICIipixXcd+8iIg8tUY1PsBF6mMcmOQumzZb5Fzv4oxVM6UBkO8TXOYbTidGBEXsOPvG7BSHbuyPCdXFZVYPO6TZipT12uhzzhzl37xyA2B/AComm0TYK7owAAAAAElFTkSuQmCC')
    
    def test_large_text_12mm(self):
        """Test large text on 12mm tape"""
        png, spec = create_label_png("Large", 60, "W12", 15, white_tape=False)
        
        # Verify PNG dimensions
        assert png.size[1] == 70  # 12mm = 70 pins
        assert spec["mm"] == 12
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('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')
    
    def test_small_text_3_5mm(self):
        """Test small text on 3.5mm tape"""
        png, spec = create_label_png("Small", 20, "W3_5", 5, white_tape=False)
        
        # Verify PNG dimensions
        assert png.size[1] == 24  # 3.5mm = 24 pins
        assert spec["mm"] == 3.5
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('iVBORw0KGgoAAAANSUhEUgAAADoAAAAYCAAAAACOtLHJAAABq0lEQVR4nO2RT0jTYRjHP9O5zSF1E4NdLJj9lMpkXuaQ2MFwIogHZXgIOhU0L1MPRcEQ7DARotsgoYhBIPE7OIjK9KJCZB1EodFEYjUZpdOU1mo9HvbHP7/fWJ3re3h4H57n833e93nh31OnupFJvrhaWabtmVjyoagxyWnGUpIqgV6Ub9dsptqe9zLyt+hN8QFgl/k/RysAMLADQNTQBmrcPJHcfGDF/zH1XAFwTn3O7Mz365pd+J0YqCkkavyJiEjotojIBxN0/cotwq27phs/JbMY9FgA1OzXbqszld6+ckKJihOW9npPVtWH5JEuStP9mIikhgygynVgUu4Cw+ItdNRK5ChqzBdWfD5b++W+4Ck/MAskWAC+YAY4e+5Mk4tjn248OMbD4cDCYHADtgDJR0AJufQWVAFgzi7lsrUpowJkj7pHXO/uDXadP44aAX4st1yaA0AhqXFvrX/ZIeA9fMPiVMaZvtNosTrC7rcrGnQXu8NkuzVJtd5bHzf7AwGAhFdDsvrG8RqA03pTGXKH17/vLY82RrVotvvhp3TsqedVXYO2+F/ltA80Ga8sRONmkQAAAABJRU5ErkJggg==')
    
    def test_long_text_18mm(self):
        """Test long text on 18mm tape"""
        png, spec = create_label_png("This is a longer text", 45, "W18", 20, white_tape=False)
        
        # Verify PNG dimensions
        assert png.size[1] == 112  # 18mm = 112 pins
        assert spec["mm"] == 18
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('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')
    
    def test_zero_margin(self):
        """Test zero margins"""
        png, spec = create_label_png("NoMargin", 35, "W6", 0, white_tape=False)
        
        # Verify minimal width (should be just the text width)
        assert png.size[1] == 32  # 6mm = 32 pins
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('iVBORw0KGgoAAAANSUhEUgAAAJIAAAAgCAAAAADcEn4sAAAFOUlEQVR4nMWYeVCVVRjGf/eyuqAIoibpKCpuk8ZokiClTZsrpqzWaDmWjk6mLbYo6lTD2GQWZaljLumkU6Axpo4z4YBCZmYlioiimUsKmhdCvcT69sd3vuXeC4iOxjNz57zrOc95z3ff892LiEzHgoMis2gEs0RE9ruYeoqILG0s4RbIaHAtO/DRfbczT7RLdNIdsmkCdiBw1W1lxFm1e0SJ2MRmx5+pJt6i9htE4Z0vHmezrW6QUj181rG5s5TvJbqrqSaTX3znlBqGHYp3E5LW7IR07JNNLZH0u80IOzDzOlPGNTchs4YEQ4noS8Y9oXRxAaxq5+nr9E52abUj/9OhVmNZtuXkkjl20uLrtTD7vNN5ce+CDpqeJdL2/i2OimMf+wFEriuuLDs425c9Ij3AaAKZIh0Zv/Wss/zIsm6ASBG2HJE1alqjL9kXVIrCt4rvLJHDzBCZq2Jtf0oKmXpf8k6r1hPKxuqUup8RETkC2NOU81BXT0q99ihn5bMaJXo7pX6UG6U1YuJEkEkpuEZyFaUokf4mpXRLQlUfRWmHiIjMA74xnL/lelAqMJx1D9oBOJ2CbW1rl1Ob/RJcfiXML2TiAei31XRc20d0qCYmcfyEYZ8cB2uHt/cOjFkv+M5X1vF/J7YLHrsZnkuA4wkdW0V8Xh8xAncMJGt0YJth28D+hlYlvH4WWWGtUptSkSOdtBNcKSJPGVVipn5y9suyBKNKP4q8rxZI0yYlS0RiNJPPZZEfWgEwsVY8qiTLtbCtIlcUJQZWSV2khVKcSE1vtYL9F5FtJqVOtZIHwGMiAwxKQbXyj17nSJEbitKvyvSEyI0QJX/oSemSr+aKERG7Cjuein29r1nJx2HXaSXXp8Eom+G6kktUKEAyhWbrdnjb2juVfAH8lZinxgmQcVUvIh7YXa2NJ1AXCkDqMQYsMmN6mbNBHnQIMn3p2OIAn0kNNCX/vmNe+/oQeCn9jBrD4aAec/GcR1qRGiuslGqm1/HWICMmGEoM5bJm0LG9nnjgySC31j0oNfsvZ9Gu5VNCTZtDjV3gimEswR0Vaqy3UuLwCnzW65vDZk3wAupMtSSPqFBIoqjAEhSwJf/tkV1d8oBaNfpZl3IP0qjoMONYUsyQ13XFAV0MT1eg3JKUgS0O/1iXc/P6PhmoPp2zafGkSI8lcUBnQwnx9DdMqXKGsDRcKacgxvDEQNk1S9I2IZ4xAS7nlvQofDG4dZ9R0977rtp1YoACGGYw6tlcSuxfjf+Xqqg5MEZvAl4vQ6416dIBokLjOXXUYhsNmXOOascbC3i7rrMXnglU8otNMnLdzJvniVF37I6reGdoBbanRcAml6wMbMnjXB/u9uYXf3oKpqKQeZWAjVqTiU65DUrXZxqGyndhcP7cnj7BE/bPgd3bXSkJi9q6toBCeHrjQ4F+PabuW+cFuL1ZVC2B2AMTg3z7p+51Y+sB1b0VvhLRr92Nllv0pNYCtO4N8JOIqNdJ1b3DnOKCEUCWiPFubst0cXfXdqZ37xkqytvSvRXmlxriCwv/NYgOueYaRga4NaU/Em7o4oVpOTDcfesJm5VUPRuoolG4UXLMMedIDVucW1pz8+jKoc/fcMsiQ30s2Dngg98r6soLNsSGbdoBHr8wqqc+suGM01n4Sfg64GbjlFoCnUWuN+G2N+G7m3hY5KwujzTvtJZENxGZoImdT4l82LJsNBSI3Fz2QEBA+LxzIlW9b51w7zG6ztICGv0j5P9FokMn5EhuaS46gl/NKqmqKNo5rW3Tcf8BFC2sZl4Iw6kAAAAASUVORK5CYII=')
    
    def test_large_margin(self):
        """Test large margins"""
        png, spec = create_label_png("BigMargin", 30, "W9", 50, white_tape=False)
        
        # Verify PNG dimensions
        assert png.size[1] == 50  # 9mm = 50 pins
        assert spec["mm"] == 9
        
        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot('iVBORw0KGgoAAAANSUhEUgAAAOcAAAAyCAAAAACCbJNgAAAEaElEQVR4nO2YbUxVdRzHv/eJu/sgMcvCcDYzlKUyRysyMQxqxUM2CYT1MFdZWWuaC3zgRauW1EpGvXC1egPNN8XFVFiRNAZCuw2lsLLMmS6IvBNERJD7AHx7cZ6Fe5F7Amydz5v7+/32O9/z++78z/nfcwADAwMDAwMDAwODCTlGgeC59veWiTWycqLWVpJfqPIskvVTPV8Y7alhjv5QW3xKSUfppG05TiUuiv5sOtHhEwCsuzdO1uLMkUP7Y/rONrMcI90ATPb4R1rIv2IitLbSf4bVcrqeJ6JYt/8K0V9PBnz1D51Ewt2R22qQLS/cIniiPp1O9K1b/+dAQuQWD5y5YujK/a/6xAjQCaieiSmfdQZ7v8lHE0VLbV0oEJvXOX/9TT7yzj3tPcG+4+WLAABuMj9+/6Dvy6XjNchKwEoWxWxt7fWf+SRJ38jXjHh/AoCtg6fN8iwANo8Ke061lx4ArfTjAw65hO6DfMMq3p+m98VGBvJEn4VtJEfix2nIPrf9ItRD+TPr0zIvu4XBDKh8PkkFyecacgMA4AY/l0s+dyh9l+YKPhtJ8qvxGrLPgFTtnztTPmXOPgCVz1gf2bzWEff47yqf5r/FJfwMT0L06R7g8PYlbsftr/jIjYJPdj1odzrGa8g+Ofbxipj5JX7yuRn36dvhUPl8gTxkAYDYnxSf2MsrLgA4zLcln3nkJkEslywTfa4GJtJQfL4GACgmK2bcJ9nkUnzWcnSh0LNW5TODLAQwL8SVkk+F+eSHANxkl1AYpyH77LUBABaTn0596Oiet3NMJpPJftN9ZVeQvlcpr8TPnULU3K9Um3tQAKDAerpDI2JLfPjVqu8Bi5C2R9IAgLYQAMAHWKc+cRSHSAQveL0Njaandvqkys0QRwT/jJP7Rg9uynYNXfUnIfmljMUWjVxvJA0A6BF+AoBp6sPq3D+b6mFZJWvZFDn1KB44cpGQpvZZ+uPmJSMnasufTpVL/ogaAEJ6BtXpE6eAOCke68NCKV6g6mm8iAIUms62y5VHd5sbUl3L1xXvG7hKL5yGXvT6XAScl5MOLBOHTFVvcaFDyHZtQI1S2Yrh9W2jALBKvj8ja+hFp8+ULIwelbNamCvMAGAv13R54HjxHijvLUiCVXgw3PEOoH3hCaehEz0+7YnFjTbUKdez6iLyDt/vmJP13WpNY8MA3jJ1timFPtjq0mLdyW923AK4Nb3hNHQS3fP2shIOblfi/m2VyMwUEyr1QN0TLvWyRfUKpLVIya0a6XAaOtF7f3bnnFJlVbvGAAAsBQKqeg2g2VX2HBGDgZePIlk7QzgNfejwOXb5jwPPJx3R1N69d19XsOfAmgpgUFX+egjdXlU+nLnFOzDS01Ry20ffIjYN16JxXbKUfP160JDRu2417CTThWgXcHz2NKabPLL72QUxN6bvJy+5Zk9junF2Ke8xk37vnEaNaeeuc9LXkC2zqjHtxJa0XAid/6EscZY1DAwMDAwMDAwM/qf8A3bBnFcP3FthAAAAAElFTkSuQmCC')


class TestMatrixConversion:
    """Test PNG to black/white matrix conversion"""
    
    def test_black_tape_matrix(self):
        """Test matrix conversion for black tape (white text)"""
        png, _ = create_label_png("Matrix", 40, "W6", 10, white_tape=False)
        matrix = png_to_bw_matrix(png)
        
        # Verify matrix structure
        assert matrix["width"] == png.size[0]
        assert matrix["height"] == png.size[1]
        assert len(matrix["data"]) == matrix["height"]
        assert len(matrix["data"][0]) == matrix["width"]
        
        # For black tape, text should be white (0s in matrix), background black (1s)
        # Check that we have some 0s (white text pixels) and some 1s (black background)
        flat_data = [pixel for row in matrix["data"] for pixel in row]
        assert 0 in flat_data  # White text pixels
        assert 1 in flat_data  # Black background pixels
    
    def test_white_tape_matrix(self):
        """Test matrix conversion for white tape (black text)"""
        png, _ = create_label_png("Matrix", 40, "W6", 10, white_tape=True)
        matrix = png_to_bw_matrix(png)
        
        # Verify matrix structure
        assert matrix["width"] == png.size[0]
        assert matrix["height"] == png.size[1]
        
        # For white tape, text should be black (1s in matrix), background white (0s)
        flat_data = [pixel for row in matrix["data"] for pixel in row]
        assert 0 in flat_data  # White background pixels
        assert 1 in flat_data  # Black text pixels


class TestBrotherRasterOutput:
    """Test Brother binary raster format generation"""
    
    def test_6mm_black_tape_raster(self):
        """Test Brother raster output for 6mm black tape"""
        png, spec = create_label_png("Raster", 40, "W6", 10, white_tape=False)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(matrix, spec, hi_res=True, feed_mm=1, auto_cut=True)
        
        # Verify raster format basics
        assert isinstance(raster, bytes)
        assert len(raster) > 1000  # Should be substantial binary data
        assert raster.startswith(b'\x00' * 400)  # Should start with NULL padding
        assert raster[400:402] == b'\x1B\x40'  # ESC @ command
        
        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshottAG2lhARtpeoQABgCqAgAAAAAbaU1AG2lLQBtpZAUATQJHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAACAAAADAAAAAAAARxEADwAAAAAAAIAAAAMAAAAAAABHEQAPAAAAAAAAgAAAAwAAAAAAAEcRAA8AAAAAAACAAAADAAAAAAAARxEADwAAAAAAAIf4f/8AAAAAAABHEQAPAAAAAAAAh/h//wAAAAAAAEcRAA8AAAAAAACH+H//AAAAAAAARxEADwAAAAAAAIf4f/8AAAAAAABHEQAPAAAAAAAAh/h//wAAAAAAAEcRAA8AAAAAAACH+H//AAAAAAAARxEADwAAAAAAAIf4f/8AAAAAAABHEQAPAAAAAAAAh/g//wAAAAAAAEcRAA8AAAAAAACH+D//AAAAAAAARxEADwAAAAAAAIf4H/8AAAAAAABHEQAPAAAAAAAAh/gH/wAAAAAAAEcRAA8AAAAAAACH+AP/AAAAAAAARxEADwAAAAAAAIPwQP8AAAAAAABHEQAPAAAAAAAAg/DgfwAAAAAAAEcRAA8AAAAAAADB4PAfAAAAAAAARxEADwAAAAAAAMAA+A8AAAAAAABHEQAPAAAAAAAA4AH8AwAAAAAAAEcRAA8AAAAAAADwA/8DAAAAAAAARxEADwAAAAAAAPwP/4MAAAAAAABHEQAPAAAAAAAA////4wAAAAAAAEcRAA8AAAAAAAD////7AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD///7/AAAAAAAARxEADwAAAAAAAP/9+B8AAAAAAABHEQAPAAAAAAAA//HgDwAAAAAAAEcRAA8AAAAAAAD/4eAHAAAAAAAARxEADwAAAAAAAP/BwYMAAAAAAABHEQAPAAAAAAAA/8fHwwAAAAAAAEcRAA8AAAAAAAD/x8fjAAAAAAAARxEADwAAAAAAAP+Ph+MAAAAAAABHEQAPAAAAAAAA/4+P4wAAAAAAAEcRAA8AAAAAAAD/j4/jAAAAAAAARxEADwAAAAAAAP+Pj+MAAAAAAABHEQAPAAAAAAAA/4+PxwAAAAAAAEcRAA8AAAAAAAD/j4/HAAAAAAAARxEADwAAAAAAAP+HH48AAAAAAABHEQAPAAAAAAAA/8MeHwAAAAAAAEcRAA8AAAAAAAD/wAAHAAAAAAAARxEADwAAAAAAAP/gAAMAAAAAAABHEQAPAAAAAAAA//AAAwAAAAAAAEcRAA8AAAAAAAD///+DAAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP///v8AAAAAAABHEQAPAAAAAAAA//B+HwAAAAAAAEcRAA8AAAAAAAD/4B4PAAAAAAAARxEADwAAAAAAAP/AHgcAAAAAAABHEQAPAAAAAAAA/8IPhwAAAAAAAEcRAA8AAAAAAAD/hw/DAAAAAAAARxEADwAAAAAAAP+Pj+MAAAAAAABHEQAPAAAAAAAA/4+H4wAAAAAAAEcRAA8AAAAAAAD/j4fjAAAAAAAARxEADwAAAAAAAP+Ph+MAAAAAAABHEQAPAAAAAAAA/4/H4wAAAAAAAEcRAA8AAAAAAAD/h8PjAAAAAAAARxEADwAAAAAAAP/Hw8cAAAAAAABHEQAPAAAAAAAA/8HhhwAAAAAAAEcRAA8AAAAAAAD/4eAHAAAAAAAARxEADwAAAAAAAP/x8A8AAAAAAABHEQAPAAAAAAAA//34HwAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/j///AAAAAAAARxEADwAAAAAAAP+P//8AAAAAAABHEQAPAAAAAAAA8AAAHwAAAAAAAEcRAA8AAAAAAADgAAAHAAAAAAAARxEADwAAAAAAAOAAAAMAAAAAAABHEQAPAAAAAAAAwAAAAwAAAAAAAEcRAA8AAAAAAAD/j//jAAAAAAAARxEADwAAAAAAAP+P/+MAAAAAAABHEQAPAAAAAAAA/4//4wAAAAAAAEcRAA8AAAAAAAD////zAAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA///v/wAAAAAAAEcRAA8AAAAAAAD//AB/AAAAAAAARxEADwAAAAAAAP/4AD8AAAAAAABHEQAPAAAAAAAA//AADwAAAAAAAEcRAA8AAAAAAAD/4IwPAAAAAAAARxEADwAAAAAAAP/Dj4cAAAAAAABHEQAPAAAAAAAA/8ePxwAAAAAAAEcRAA8AAAAAAAD/h4/DAAAAAAAARxEADwAAAAAAAP+Pj+MAAAAAAABHEQAPAAAAAAAA/4+P4wAAAAAAAEcRAA8AAAAAAAD/j4/jAAAAAAAARxEADwAAAAAAAP+Pj+MAAAAAAABHEQAPAAAAAAAA/4+P4wAAAAAAAEcRAA8AAAAAAAD/x4/DAAAAAAAARxEADwAAAAAAAP/Dj8cAAAAAAABHEQAPAAAAAAAA/+GPBwAAAAAAAEcRAA8AAAAAAAD/4A8PAAAAAAAARxEADwAAAAAAAP/wDx8AAAAAAABHEQAPAAAAAAAA//wPPwAAAAAAAEcRAA8AAAAAAAD//8//AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/gAADAAAAAAAARxEADwAAAAAAAP+AAAMAAAAAAABHEQAPAAAAAAAA/4AAAwAAAAAAAEcRAA8AAAAAAAD/4P//AAAAAAAARxEADwAAAAAAAP/H//8AAAAAAABHEQAPAAAAAAAA/4///wAAAAAAAEcRAA8AAAAAAAD/j///AAAAAAAARxEADwAAAAAAAP+P//8AAAAAAABHEQAPAAAAAAAA/4///wAAAAAAAEcRAA8AAAAAAAD/h///AAAAAAAARxEADwAAAAAAAP/f//8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAAAa')
    
    def test_12mm_white_tape_raster(self):
        """Test Brother raster output for 12mm white tape"""
        png, spec = create_label_png("WhiteRaster", 50, "W12", 15, white_tape=True)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(matrix, spec, hi_res=True, feed_mm=1, auto_cut=True)
        
        # Verify raster format basics
        assert isinstance(raster, bytes)
        assert len(raster) > 1000
        assert raster.startswith(b'\x00' * 400)
        
        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshot')
    
    def test_raster_no_auto_cut(self):
        """Test Brother raster output without auto-cut"""
        png, spec = create_label_png("NoCut", 35, "W6", 10, white_tape=False)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(matrix, spec, hi_res=True, feed_mm=1, auto_cut=False)
        
        # Verify raster format
        assert isinstance(raster, bytes)
        assert len(raster) > 1000
        
        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshottAG2lhARtpeoQABgCqAgAAAAAbaUtIG2lkBQBNAkcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAOAAAA8AAAAAAABHEQAPAAAAAAAA4AAADwAAAAAAAEcRAA8AAAAAAADgAAAPAAAAAAAARxEADwAAAAAAAPB///8AAAAAAABHEQAPAAAAAAAA+D///wAAAAAAAEcRAA8AAAAAAAD+D///AAAAAAAARxEADwAAAAAAAP8H//8AAAAAAABHEQAPAAAAAAAA/8H//wAAAAAAAEcRAA8AAAAAAAD/4P//AAAAAAAARxEADwAAAAAAAP/4P/8AAAAAAABHEQAPAAAAAAAA//wP/wAAAAAAAEcRAA8AAAAAAAD//wf/AAAAAAAARxEADwAAAAAAAP//gf8AAAAAAABHEQAPAAAAAAAA///g/wAAAAAAAEcRAA8AAAAAAAD///g/AAAAAAAARxEADwAAAAAAAP///B8AAAAAAABHEQAPAAAAAAAA4AAADwAAAAAAAEcRAA8AAAAAAADgAAAPAAAAAAAARxEADwAAAAAAAOAAAA8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD//wP/AAAAAAAARxEADwAAAAAAAP/8AP8AAAAAAABHEQAPAAAAAAAA//AAPwAAAAAAAEcRAA8AAAAAAAD/8Hg/AAAAAAAARxEADwAAAAAAAP/h/h8AAAAAAABHEQAPAAAAAAAA/+P/HwAAAAAAAEcRAA8AAAAAAAD/x/+PAAAAAAAARxEADwAAAAAAAP/H/48AAAAAAABHEQAPAAAAAAAA/8f/jwAAAAAAAEcRAA8AAAAAAAD/x/+PAAAAAAAARxEADwAAAAAAAP/H/48AAAAAAABHEQAPAAAAAAAA/8P/DwAAAAAAAEcRAA8AAAAAAAD/4f4fAAAAAAAARxEADwAAAAAAAP/g/B8AAAAAAABHEQAPAAAAAAAA//AAPwAAAAAAAEcRAA8AAAAAAAD/+AB/AAAAAAAARxEADwAAAAAAAP/+Af8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/wA//AAAAAAAARxEADwAAAAAAAP8AAf8AAAAAAABHEQAPAAAAAAAA/gAA/wAAAAAAAEcRAA8AAAAAAAD8D+B/AAAAAAAARxEADwAAAAAAAPg/+D8AAAAAAABHEQAPAAAAAAAA8P/+HwAAAAAAAEcRAA8AAAAAAADx//8fAAAAAAAARxEADwAAAAAAAPH//x8AAAAAAABHEQAPAAAAAAAA4///jwAAAAAAAEcRAA8AAAAAAADj//+PAAAAAAAARxEADwAAAAAAAOP//48AAAAAAABHEQAPAAAAAAAA4///jwAAAAAAAEcRAA8AAAAAAADj//+PAAAAAAAARxEADwAAAAAAAOP//48AAAAAAABHEQAPAAAAAAAA4f//DwAAAAAAAEcRAA8AAAAAAADx//8fAAAAAAAARxEADwAAAAAAAPD//h8AAAAAAABHEQAPAAAAAAAA+H/8PwAAAAAAAEcRAA8AAAAAAAD4H+A/AAAAAAAARxEADwAAAAAAAPwf4H8AAAAAAABHEQAPAAAAAAAA/z/h/wAAAAAAAEcRAA8AAAAAAAD///f/AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP/AAP8AAAAAAABHEQAPAAAAAAAA/8AAPwAAAAAAAEcRAA8AAAAAAAD/wAAfAAAAAAAARxEADwAAAAAAAP///B8AAAAAAABHEQAPAAAAAAAA////DwAAAAAAAEcRAA8AAAAAAAD///+PAAAAAAAARxEADwAAAAAAAP///48AAAAAAABHEQAPAAAAAAAA////jwAAAAAAAEcRAA8AAAAAAAD///+PAAAAAAAARxEADwAAAAAAAP///x8AAAAAAABHEQAPAAAAAAAA////HwAAAAAAAEcRAA8AAAAAAAD///x/AAAAAAAARxEADwAAAAAAAP/AAA8AAAAAAABHEQAPAAAAAAAA/8AADwAAAAAAAEcRAA8AAAAAAAD/wAAPAAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/8f//wAAAAAAAEcRAA8AAAAAAAD/x///AAAAAAAARxEADwAAAAAAAPgAAB8AAAAAAABHEQAPAAAAAAAA+AAAHwAAAAAAAEcRAA8AAAAAAADwAAAPAAAAAAAARxEADwAAAAAAAP/H/48AAAAAAABHEQAPAAAAAAAA/8f/jwAAAAAAAEcRAA8AAAAAAAD/x/+PAAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAAEcRAA8AAAAAAAD/////AAAAAAAARxEADwAAAAAAAP////8AAAAAAABHEQAPAAAAAAAA/////wAAAAAAABo=')
    
    def test_different_feed_margin(self):
        """Test Brother raster output with different feed margin"""
        png, spec = create_label_png("Feed", 40, "W9", 10, white_tape=False)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(matrix, spec, hi_res=True, feed_mm=2, auto_cut=True)
        
        # Verify raster format
        assert isinstance(raster, bytes)
        assert len(raster) > 1000
        
        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshottAG2lhARtpeoQACQCqAgAAAAAbaU1AG2lLQBtpZAsATQJHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf+AAAAD/4AAAAAARxEADwAAAAAB/4AAAAP/gAAAAABHEQAPAAAAAAH/gAAAA/+AAAAAAEcRAA8AAAAAAf+AAAAD/4AAAAAARxEADwAAAAAB/4f4f///gAAAAABHEQAPAAAAAAH/h/h///+AAAAAAEcRAA8AAAAAAf+H+H///4AAAAAARxEADwAAAAAB/4f4f///gAAAAABHEQAPAAAAAAH/h/h///+AAAAAAEcRAA8AAAAAAf+H+H///4AAAAAARxEADwAAAAAB/4f4f///gAAAAABHEQAPAAAAAAH/h/h///+AAAAAAEcRAA8AAAAAAf+H+H///4AAAAAARxEADwAAAAAB/4f4f///gAAAAABHEQAPAAAAAAH/h/h///+AAAAAAEcRAA8AAAAAAf+H+H///4AAAAAARxEADwAAAAAB/4f4f///gAAAAABHEQAPAAAAAAH/h/h///+AAAAAAEcRAA8AAAAAAf+H/////4AAAAAARxEADwAAAAAB/4f/////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////7///gAAAAABHEQAPAAAAAAH///wAf/+AAAAAAEcRAA8AAAAAAf//+AA//4AAAAAARxEADwAAAAAB///wAA//gAAAAABHEQAPAAAAAAH//+CMD/+AAAAAAEcRAA8AAAAAAf//w4+H/4AAAAAARxEADwAAAAAB///Hj8f/gAAAAABHEQAPAAAAAAH//4ePw/+AAAAAAEcRAA8AAAAAAf//j4/j/4AAAAAARxEADwAAAAAB//+Pj+P/gAAAAABHEQAPAAAAAAH//4+P4/+AAAAAAEcRAA8AAAAAAf//j4/j/4AAAAAARxEADwAAAAAB//+Pj+P/gAAAAABHEQAPAAAAAAH//8ePw/+AAAAAAEcRAA8AAAAAAf//w4/H/4AAAAAARxEADwAAAAAB///hjwf/gAAAAABHEQAPAAAAAAH//+APD/+AAAAAAEcRAA8AAAAAAf//8A8f/4AAAAAARxEADwAAAAAB///8Dz//gAAAAABHEQAPAAAAAAH////P//+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///+///4AAAAAARxEADwAAAAAB///8AH//gAAAAABHEQAPAAAAAAH///gAP/+AAAAAAEcRAA8AAAAAAf//8AAP/4AAAAAARxEADwAAAAAB///gjA//gAAAAABHEQAPAAAAAAH//8OPh/+AAAAAAEcRAA8AAAAAAf//x4/H/4AAAAAARxEADwAAAAAB//+Hj8P/gAAAAABHEQAPAAAAAAH//4+P4/+AAAAAAEcRAA8AAAAAAf//j4/j/4AAAAAARxEADwAAAAAB//+Pj+P/gAAAAABHEQAPAAAAAAH//4+P4/+AAAAAAEcRAA8AAAAAAf//j4/j/4AAAAAARxEADwAAAAAB///Hj8P/gAAAAABHEQAPAAAAAAH//8OPx/+AAAAAAEcRAA8AAAAAAf//4Y8H/4AAAAAARxEADwAAAAAB///gDw//gAAAAABHEQAPAAAAAAH///APH/+AAAAAAEcRAA8AAAAAAf///A8//4AAAAAARxEADwAAAAAB////z///gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////x///gAAAAABHEQAPAAAAAAH///wAf/+AAAAAAEcRAA8AAAAAAf//8AAf/4AAAAAARxEADwAAAAAB///gAA//gAAAAABHEQAPAAAAAAH//8D+D/+AAAAAAEcRAA8AAAAAAf//w/+H/4AAAAAARxEADwAAAAAB//+H/8P/gAAAAABHEQAPAAAAAAH//4//4/+AAAAAAEcRAA8AAAAAAf//j//j/4AAAAAARxEADwAAAAAB//+P/+P/gAAAAABHEQAPAAAAAAH//4//4/+AAAAAAEcRAA8AAAAAAf//j//j/4AAAAAARxEADwAAAAAB///H/8f/gAAAAABHEQAPAAAAAAH//+P/h/+AAAAAAEcRAA8AAAAAAf//4P8P/4AAAAAARxEADwAAAAAB/4AAAAP/gAAAAABHEQAPAAAAAAH/gAAAA/+AAAAAAEcRAA8AAAAAAf+AAAAD/4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAAEcRAA8AAAAAAf///////4AAAAAARxEADwAAAAAB////////gAAAAABHEQAPAAAAAAH///////+AAAAAABo=')


class TestAllTapeSizes:
    """Test all supported tape sizes"""
    
    @pytest.mark.parametrize("tape_key", list(TAPE_SPECS.keys()))
    def test_all_tape_sizes_png(self, tape_key):
        """Test PNG generation for all tape sizes"""
        png, spec = create_label_png("Test", 35, tape_key, 10, white_tape=False)
        
        # Verify correct tape height
        expected_height = TAPE_SPECS[tape_key]["pins"]
        assert png.size[1] == expected_height
        assert spec["mm"] == TAPE_SPECS[tape_key]["mm"]
        
        # Verify we can generate a matrix and raster
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(matrix, spec)
        
        assert isinstance(raster, bytes)
        assert len(raster) > 500  # Should have substantial content


class TestSymmetricCentering:
    """Test that text is perfectly centered"""
    
    def test_centering_consistency(self):
        """Test that centering is mathematically consistent"""
        # Create two identical labels with different margins
        png1, _ = create_label_png("Center", 40, "W6", 10, white_tape=False)
        png2, _ = create_label_png("Center", 40, "W6", 20, white_tape=False)
        
        # Convert to matrices
        matrix1 = png_to_bw_matrix(png1)
        matrix2 = png_to_bw_matrix(png2)
        
        # Both should have identical text positioning relative to their margins
        # The text portion should be identical, just with different margin sizes
        assert matrix1["height"] == matrix2["height"]  # Same tape height
        assert matrix1["width"] + 20 == matrix2["width"]  # Width difference = margin difference * 2
        
        # For black tape, verify the images have consistent structure
        # (Text pixels are white=0, background pixels are black=1)
        # The ink-based measurement should ensure consistent glyph rendering
        assert matrix1["width"] > 0
        assert matrix2["width"] > 0
        assert matrix1["height"] == 32  # 6mm tape height


if __name__ == "__main__":
    pytest.main([__file__, "-v"])