#!/usr/bin/env python3
"""
Test suite for Brother label printer PNG generation and binary output
Uses inline snapshots to ensure layout consistency
"""

import base64
import io

import pytest
from inline_snapshot import snapshot

from pybrother.cli import (
    TAPE_SPECS,
    convert_to_brother_raster,
    create_label_png,
    png_to_bw_matrix,
)


def png_to_b64(png_image):
    """Convert PIL Image to base64 string for snapshot comparison"""
    buffer = io.BytesIO()
    png_image.save(buffer, format="PNG")
    return base64.b64encode(buffer.getvalue()).decode("utf-8")


def binary_to_b64(binary_data):
    """Convert binary data to base64 string for snapshot comparison"""
    return base64.b64encode(binary_data).decode("utf-8")


class TestPNGGeneration:
    """Test PNG generation with various parameters"""

    def test_basic_6mm_black_tape(self):
        """Test basic 6mm black tape with default settings"""
        png, spec = create_label_png("Test", 40, "W6", 10)

        # Verify PNG dimensions and content
        assert png.size[1] == 32  # 6mm = 32 pins
        assert spec["mm"] == 6

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            'iVBORw0KGgoAAAANSUhEUgAAAFwAAAAgCAAAAAC6ZEA+AAACo0lEQVR4nOWWW0iUURDHf9+6qKuRiWBWoJGKEoZgpNCFlMSoHqILFCaYYnmJoAvSBewhQUS7EESUgRaI0UtWKiUiokbggwT6YIRGqYXEqpuou7qs08NeXXf92LXtpXma+X8zv3O+OYfhKELgTOPwDIpHy/OFNucNvnYz1xwNGLwn9dpswOBVQ+6KE75B7JYPDNmDxjUs9zd7/p/BFxtzEyN0sTl3frmIncWpkcHRKeebLQC0Kko79CmK8tolSVbasgMVebXVnht+22LTxnY7AEmdIiItjrjZWakOr1RctnLEKCIi+lgXLaTDb3g9EF7eN2MafrQNKBQRkUKg8MOUeaI3D0gwi4jIQchYDlKDj+ogftjqzx0D3omISQfltoQqoM0LXO1A7xsJaYu3+mEvEqEKGDXCIVvC1Sjo8lKsApfncCrJ0d1S6J2AdUC9bVYH60Vq/YMPTkGWM9wL9MCmOGjc9WRk9VpV+CegwDnc04GvwHWgvyQhrqBJvwa4h9pJoOQyAKPPzmzc82DSX7hhpWQEuNeRab3+Sx8vxT/2Vq1dHR4GfE7y8CE7+2fL++5pgN+llgueq1V2HoW1yR5sc3Gzvv9ujha4afALnoz3WwyatCvt39JhptsveEYoNC26q7mKkmr3t9QCYwCKe5oaPOQE/Kh2hLcURemATBgYtGtLQKQN5f4IUpktAxrQ1NmCpiDYbhGZDoM0g1VbOABB4yIiJyHBt8EllQCHW/ULY2+PA9puEZEKIPbhF+Pi+MudQJGIiJQBdaaR7z7Al8pc/1PbICIipixXcd+8iIg8tUY1PsBF6mMcmOQumzZb5Fzv4oxVM6UBkO8TXOYbTidGBEXsOPvG7BSHbuyPCdXFZVYPO6TZipT12uhzzhzl37xyA2B/AComm0TYK7owAAAAAElFTkSuQmCC'
        )

    def test_basic_6mm_white_tape(self):
        """Test basic 6mm white tape with black text"""
        png, spec = create_label_png("Test", 40, "W6", 10)

        # Verify PNG dimensions and content
        assert png.size[1] == 32  # 6mm = 32 pins
        assert spec["mm"] == 6

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            "iVBORw0KGgoAAAANSUhEUgAAAFwAAAAgCAAAAAC6ZEA+AAACo0lEQVR4nOWWW0iUURDHf9+6qKuRiWBWoJGKEoZgpNCFlMSoHqILFCaYYnmJoAvSBewhQUS7EESUgRaI0UtWKiUiokbggwT6YIRGqYXEqpuou7qs08NeXXf92LXtpXma+X8zv3O+OYfhKELgTOPwDIpHy/OFNucNvnYz1xwNGLwn9dpswOBVQ+6KE75B7JYPDNmDxjUs9zd7/p/BFxtzEyN0sTl3frmIncWpkcHRKeebLQC0Kko79CmK8tolSVbasgMVebXVnht+22LTxnY7AEmdIiItjrjZWakOr1RctnLEKCIi+lgXLaTDb3g9EF7eN2MafrQNKBQRkUKg8MOUeaI3D0gwi4jIQchYDlKDj+ogftjqzx0D3omISQfltoQqoM0LXO1A7xsJaYu3+mEvEqEKGDXCIVvC1Sjo8lKsApfncCrJ0d1S6J2AdUC9bVYH60Vq/YMPTkGWM9wL9MCmOGjc9WRk9VpV+CegwDnc04GvwHWgvyQhrqBJvwa4h9pJoOQyAKPPzmzc82DSX7hhpWQEuNeRab3+Sx8vxT/2Vq1dHR4GfE7y8CE7+2fL++5pgN+llgueq1V2HoW1yR5sc3Gzvv9ujha4afALnoz3WwyatCvt39JhptsveEYoNC26q7mKkmr3t9QCYwCKe5oaPOQE/Kh2hLcURemATBgYtGtLQKQN5f4IUpktAxrQ1NmCpiDYbhGZDoM0g1VbOABB4yIiJyHBt8EllQCHW/ULY2+PA9puEZEKIPbhF+Pi+MudQJGIiJQBdaaR7z7Al8pc/1PbICIipixXcd+8iIg8tUY1PsBF6mMcmOQumzZb5Fzv4oxVM6UBkO8TXOYbTidGBEXsOPvG7BSHbuyPCdXFZVYPO6TZipT12uhzzhzl37xyA2B/AComm0TYK7owAAAAAElFTkSuQmCC"
        )

    def test_large_text_12mm(self):
        """Test large text on 12mm tape"""
        png, spec = create_label_png("Large", 60, "W12", 15)

        # Verify PNG dimensions
        assert png.size[1] == 70  # 12mm = 70 pins
        assert spec["mm"] == 12

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            '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'
        )

    def test_small_text_3_5mm(self):
        """Test small text on 3.5mm tape"""
        png, spec = create_label_png("Small", 20, "W3_5", 5)

        # Verify PNG dimensions
        assert png.size[1] == 24  # 3.5mm = 24 pins
        assert spec["mm"] == 3.5

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            'iVBORw0KGgoAAAANSUhEUgAAADoAAAAYCAAAAACOtLHJAAABwklEQVR4nOWUT0iTcRjHP++2NEtmSoyZEqG0Q7JDGhLrYtIfqWAS0mEUkWGnIAgFPchAEKHaZYO8RYdICiKoLAoaEVuXhkp/tgyyQ4J5KyLnK9Ovh70icy+Fu3ToOTz8/jyf5/s8vwd+hijVHCWT/xh91ukt8xy9tfyX8A5j0XKAJEkD1lV7Vn+042QtJ+VVJ0cqR7+Z8w998egmKpYkDROVJE0T2KyqcAPgUxI6682rnpqLC0R27ziWAXjTtavMfeiereqU4b3zay1zsO4MQM8QQKMpPXHmQ18WqlrPFHOx5WDveFaSgo6aR7+TVeXu2z/Te0lKzdse/Fia6eGcLaoPlxuAqusrUpCbki7QL+kad9eKmedEIeqy6m6KxWZfP7/fNxcBDgO1BICdmACf3n/5mGDD0F3ry/pQKByI9nmhGjAsD2QuJexm4wAwnS35XUNXLgM4C0JyJxP7r0TH321EXQDl/olXbQBk8BRlf/v1yAsDxsjZqNLLqaH04kIqFG9uKkIr+Zxamh3uJmvX69mpSDgMUDtW3NO+A6lWAGbsVLkRD+2p2O4fTPuKUefj83VbG08/bf8+XXBu/IcfTAm2Cs6uIMekIt5LAAAAAElFTkSuQmCC'
        )

    def test_long_text_18mm(self):
        """Test long text on 18mm tape"""
        png, spec = create_label_png(
            "This is a longer text", 45, "W18", 20
        )

        # Verify PNG dimensions
        assert png.size[1] == 112  # 18mm = 112 pins
        assert spec["mm"] == 18

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            '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'
        )

    def test_zero_margin(self):
        """Test zero margins"""
        png, spec = create_label_png("NoMargin", 35, "W6", 0)

        # Verify minimal width (should be just the text width)
        assert png.size[1] == 32  # 6mm = 32 pins

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            'iVBORw0KGgoAAAANSUhEUgAAAJIAAAAgCAAAAADcEn4sAAAFQUlEQVR4nL2Ye0yVZRzHP+9BjnJQBhiK96kgCCpZZo5AcbjZNJXk0NIm3tJpFma62WiW10qrMWvesiydEwS8oIbOVZqEt3RMpqagqCtMFJSLGrdznv44z3kv5xwInPLdzp7f9Xm+7+933t/7ngPwvdDhZdgkmsAmgFiDqQTgk6YS/geJHs8yAYv/oRXIN0RntCa1ZTABlfNbk2HP1mvPiBI5u1sc399Mlk69UkjEkx+eLcQ8j5RM8F55S3fxjyf/tqamExX65JQ8wwSh47i3sMUJSdj3aNpukp42I0zAlk7sOtTShARvMlWl4CrWZ0Kp5zqYX+3uu/vp6K7mwKiUc3pjwGhd59IZHKbzXV8zurfF0jN+3QOHPkZRHv49NdBv8KI6gDOzQ30CRmys51VFuQlgVZTNQIKilHNwSl+L//Mf/gVAmLCPgrmuc8m2toPzqKQqdS69KLbCehlr78NKMck5lxpSvJ0J/oeEEELEw61+AFFCCFuKdL5UOhZu6ObSJLg2Vjo77BRAmBDFPii/ulCaq7v88AqNUnk7YiSlfLisUdK30FwkKU0AIE0I8YbqHBrjRilSa1uBCYCQVYg5jw1d2/gtdFtfUndvfzRcmaI5Oo8iv9QhZhA5ULXvyYY5p6oaK/NmKdSnSevB53ZXV/w0DXZmQmRm+b8FC0wFv+OKS4w5XPnobCLYv3BUSTQOh0X6Kj3sAlFljg4uAI6oVRKbnZ2zBbNcqFWKho9k9VIcm4p44ITDVB8MYx4LIYTY54VblVjsCHsTgiQlcdGM6bSOUha0K5Yn2IbBZI1SmRevCCGE+AUuqZQqvPB7JBNOg6+k9II0HQXfu1Je4k6pW53DdQI5vYHIVOyz6rVK/gzjQ5ztXQjHhOrqEsvJUoB0IrTRHdgoqixS7gW1UoyR6wGwBknZwxAcZ3asA3WUSB3M5dVazHVtN4iBB/c1XxIiG2jY62Eo1V7N/eqt4WCTen+5FsEIZ0zPPm5p4XL101Py3ubF54VqTAUEq0o3h8GJySaygKP3XUZ3YeroHpbw8Ut2lWq2QLnegS6qMRhX+MnVpKfEsA9omOW8OIQ+wQZ4aWpwDCdLIYPwQbqgmqlRnx2/bcgD2sm1Duyq0TVIT8Mgrwjl/JdOJRDuqJ7bgL8uyYrIpjbH0DfbhHTAHBKXvHLvGbcjCYQyVbnn7vdMyec7heVFUhkAeaonDwI665ISFbLIrTH0LeM3eOfC4+Jj25e9bkZfEwAGwVmV0Y2WUmLkPGrflkWNg9xr0m77BmL1Sd2jOVmaxYAhOtthSNgwxNHeHKDReE487KuU8tZmGRkosbY3efIZOzGIRqujwPaFBZBsyLIi0g8Zv9xV2o2/bRWaIpEQRM0Mx5DJX9UKSp22qAX3+RguRH19o6HiwMgNMG6ykZLC6ofGERABR2b8UVl3c8eo2TbA5c2i/QrIid5/v/7P1HgXth4QJjQkg/OxO10XMqBce+wKIYQYAYQ4RDm9r/sYd81zTO905872SQb3LeP03iqjGlyrBGldVfGHNerLyfTznY1hWMFlKPXL7OgUe22Pg1MuGUrmNCmZNwLt3SqjwoVS4AZtj9SSlbFdvX2HvHvux44uWVjlR4fXLi8d6uflP2hmTknyRHD7hWHecWJmf4sl4v2i2YBv05QU97H1zFEWTMeapt2mpl1PFacVpa9TPq490zyhrSj1gJsHHGLZMohrLla0ESLBsrSwuvpqWm8wFzcT2WaUcvX9aPKPkDalJDICnIQCdjUb2IZ3XMX23IsP2ncPSUp0mykG/AdFSaZubqVhegAAAABJRU5ErkJggg=='
        )

    def test_large_margin(self):
        """Test large margins"""
        png, spec = create_label_png("BigMargin", 30, "W9", 50)

        # Verify PNG dimensions
        assert png.size[1] == 50  # 9mm = 50 pins
        assert spec["mm"] == 9

        # Snapshot the PNG content
        png_b64 = png_to_b64(png)
        assert png_b64 == snapshot(
            'iVBORw0KGgoAAAANSUhEUgAAAOcAAAAyCAAAAACCbJNgAAAEp0lEQVR4nO2af0zUZRzH3w8cd6BwCnKBiZRZVDoHjWAyiYhF4gamcdY/LmhrtWqrHKxlbLn+QRJWUVvGtEbLNRSwhfxYc2jalVGNGqbD1Dkr0JgWcD/wfn764/vzvB9699w4u+79zz2fzz73fj6v5/t9vt/v/WCE/4USot3APCnOGVuKc8aW4pyxpThnbCnOGVAPMkHapYWvnRJzjNX7Ky1ljD2piocYY1WhzhfAOzRxHE/n5dHWguYblg3YlHFX+LNxivO8dTV9eqMS24A8tH/JNxuHwuM0E5Hn2qWhUqDJAQBEnf4rdStwQA4GZ1aFMVlA71AU/vFkuuyqw/dh4sfgZbUYlE/cLhjDno5TfOdt8lPARPASI2z94tDa/1/lhAbIBVTXxNGnc7WZ63tQzkSk4uXoFov7bKvul995urHQoM3Ib7gAALAw1nP5idTszWd8PRirB1yMdTnaSzOT73puPKxOKWQVCvuTiMiRj5VuIiKgjoiIdovrZlyLWiJaBx29ggUWoXojdjiB9UREnkZpgbW9RERmoKsIQOIlHw/B2wm8s1pc2+7QeyYOTtfUQCmShknFuU+1gBLncWA/ERFN63BS4mxR6vRXBc5HAGCDr4fMqZWyi67OF6esO4+QinMmCyg7avunJ0/F6V4qtEuf4F4SOc1pSH77jNl2/oMsoFPgRM7ha1abr4fMCfb8mH1ylw7YO++cWS02FWcHUOMiIppZo3DSi0ixEBFVokni7AX2CGaHgO0ip4nIn4fC2UZERK3Aq/POCTxsUTirkXBRqDmq4hwGuohoSoOfJU5Fk8DLRGQGcoSEj4fMucRBRETngGdDbzr85wSyX/nujQU49pKS/gVrckX6xaqVMKAbQLfr7gIvE+fZr96rWwu4hbAwmAcAFCcBALIBV+gda0J/iyTtkpKSygra15ItZaYgtgh2x7Rcl/j43kHrwuseEsZ2Hznv9rLLDOYBAAbhRQeE8Z0z5/2zvAruE1LgccIjjdWtGDHXjwmTmrP5gY9+06yuafhsRE4lB/UAkMTTKO/nzzxgWvbKwO/S+E9VTUU6urGfVigb+1CTp3LE+mtf21b99f0E8OAVL+cF4DY5KMApscmRv1U1SRsxaD2AWiXTjpQvihMB4IS8P4N78IqTc3QIiUVyVAPPNg8A2Bu8qoyY6/gBW5TEOFzCteTcdsDhVRvIg1M8nPazbRVOVCvHsy4dBx87PmceWvetV2GlHm9SbrGSyICz2jRrGdtR8Bdg8aoN5MGp8K63acowdZcyXvxuPYaHxYApeV3151b1aYstJ2F6SAomvawDeXCKd38uG8hTRXU7BT/WDOhU+VrA667SWCYO9B8WYcwDtQJ58ImDMyFt5aY942Veude/37pca9j0zTYgVZXesBDLSlRxyvD7JXqNobz14guPYtaEm/HgVOiPUDejceCtW8FDVkS/v21h7Jgw2gnkR8/DnyK2YkTUC9z+8R/2K19vBvSW6Hn4UUQ5rTnK+nVG0cOPIrs/f5Ie6bXtUfXwFYvs/01mO/pOz6bnVD1zT3Q9fBRhzltW8d/LYktxzthSnDO2FOeMLcU5Y0v/Ag9QjMSrwogpAAAAAElFTkSuQmCC'
        )


class TestMatrixConversion:
    """Test PNG to black/white matrix conversion"""

    def test_black_tape_matrix(self):
        """Test matrix conversion for black tape (white text)"""
        png, _ = create_label_png("Matrix", 40, "W6", 10)
        matrix = png_to_bw_matrix(png)

        # Verify matrix structure
        assert matrix["width"] == png.size[0]
        assert matrix["height"] == png.size[1]
        assert len(matrix["data"]) == matrix["height"]
        assert len(matrix["data"][0]) == matrix["width"]

        # For black tape, text should be white (0s in matrix), background black (1s)
        # Check that we have some 0s (white text pixels) and some 1s (black background)
        flat_data = [pixel for row in matrix["data"] for pixel in row]
        assert 0 in flat_data  # White text pixels
        assert 1 in flat_data  # Black background pixels

    def test_white_tape_matrix(self):
        """Test matrix conversion for white tape (black text)"""
        png, _ = create_label_png("Matrix", 40, "W6", 10)
        matrix = png_to_bw_matrix(png)

        # Verify matrix structure
        assert matrix["width"] == png.size[0]
        assert matrix["height"] == png.size[1]

        # For white tape, text should be black (1s in matrix), background white (0s)
        flat_data = [pixel for row in matrix["data"] for pixel in row]
        assert 0 in flat_data  # White background pixels
        assert 1 in flat_data  # Black text pixels


class TestBrotherRasterOutput:
    """Test Brother binary raster format generation"""

    def test_6mm_black_tape_raster(self):
        """Test Brother raster output for 6mm black tape"""
        png, spec = create_label_png("Raster", 40, "W6", 10)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(
            matrix, spec, hi_res=True, feed_mm=1
        )

        # Verify raster format basics
        assert isinstance(raster, bytes)
        assert len(raster) > 1000  # Should be substantial binary data
        assert raster.startswith(b"\x00" * 400)  # Should start with NULL padding
        assert raster[400:402] == b"\x1b\x40"  # ESC @ command

        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshot(
tAG2lhARtpeoQABgCqAgAAAAAbaU1AG2lBARtpS0wbaWQOAE0CRxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAf////AAAAAAAAEcRAA8AAAAAAAB////8AAAAAAAARxEADwAAAAAAAH////wAAAAAAABHEQAPAAAAAAAAf////AAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAeAAAAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAeAAAAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHwAAAAAAAAABHEQAPAAAAAAAAeAfAAAAAAAAAAEcRAA8AAAAAAAB4B+AAAAAAAAAARxEADwAAAAAAAHgH+AAAAAAAAABHEQAPAAAAAAAAeAf8AAAAAAAAAEcRAA8AAAAAAAB8D78AAAAAAAAARxEADwAAAAAAAHwPH4AAAAAAAABHEQAPAAAAAAAAPh8P4AAAAAAAAEcRAA8AAAAAAAA//wfwAAAAAAAARxEADwAAAAAAAB/+A/wAAAAAAABHEQAPAAAAAAAAD/wA/AAAAAAAAEcRAA8AAAAAAAAD8AB8AAAAAAAARxEADwAAAAAAAAAAABwAAAAAAABHEQAPAAAAAAAAAAAABAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAABAAAAAAAAAEcRAA8AAAAAAAAAAgfgAAAAAAAARxEADwAAAAAAAAAOH/AAAAAAAABHEQAPAAAAAAAAAB4f+AAAAAAAAEcRAA8AAAAAAAAAPj58AAAAAAAARxEADwAAAAAAAAA4ODwAAAAAAABHEQAPAAAAAAAAADg4HAAAAAAAAEcRAA8AAAAAAAAAcHgcAAAAAAAARxEADwAAAAAAAABwcBwAAAAAAABHEQAPAAAAAAAAAHBwHAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAABwcDgAAAAAAABHEQAPAAAAAAAAAHBwOAAAAAAAAEcRAA8AAAAAAAAAeOBwAAAAAAAARxEADwAAAAAAAAA84eAAAAAAAABHEQAPAAAAAAAAAD//+AAAAAAAAEcRAA8AAAAAAAAAH//8AAAAAAAARxEADwAAAAAAAAAP//wAAAAAAABHEQAPAAAAAAAAAAAAfAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAEAAAAAAAAARxEADwAAAAAAAAAPgeAAAAAAAABHEQAPAAAAAAAAAB/h8AAAAAAAAEcRAA8AAAAAAAAAP+H4AAAAAAAARxEADwAAAAAAAAA98HgAAAAAAABHEQAPAAAAAAAAAHjwPAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAABweBwAAAAAAABHEQAPAAAAAAAAAHB4HAAAAAAAAEcRAA8AAAAAAAAAcHgcAAAAAAAARxEADwAAAAAAAABwOBwAAAAAAABHEQAPAAAAAAAAAHg8HAAAAAAAAEcRAA8AAAAAAAAAODw4AAAAAAAARxEADwAAAAAAAAA+HngAAAAAAABHEQAPAAAAAAAAAB4f+AAAAAAAAEcRAA8AAAAAAAAADg/wAAAAAAAARxEADwAAAAAAAAACB+AAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAHAAAAAAAAAAAEcRAA8AAAAAAAAAcAAAAAAAAAAARxEADwAAAAAAAA///+AAAAAAAABHEQAPAAAAAAAAH///+AAAAAAAAEcRAA8AAAAAAAAf///8AAAAAAAARxEADwAAAAAAAD////wAAAAAAABHEQAPAAAAAAAAAHAAHAAAAAAAAEcRAA8AAAAAAAAAcAAcAAAAAAAARxEADwAAAAAAAABwABwAAAAAAABHEQAPAAAAAAAAAAAADAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAEAAAAAAAAABHEQAPAAAAAAAAAAP/gAAAAAAAAEcRAA8AAAAAAAAAB//AAAAAAAAARxEADwAAAAAAAAAP//AAAAAAAABHEQAPAAAAAAAAAB9z8AAAAAAAAEcRAA8AAAAAAAAAPHB4AAAAAAAARxEADwAAAAAAAAA4cDgAAAAAAABHEQAPAAAAAAAAAHhwPAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAABwcBwAAAAAAABHEQAPAAAAAAAAAHBwHAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAABwcBwAAAAAAABHEQAPAAAAAAAAADhwPAAAAAAAAEcRAA8AAAAAAAAAPHA4AAAAAAAARxEADwAAAAAAAAAecPgAAAAAAABHEQAPAAAAAAAAAB/w8AAAAAAAAEcRAA8AAAAAAAAAD/DgAAAAAAAARxEADwAAAAAAAAAD8MAAAAAAAABHEQAPAAAAAAAAAAAwAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAH///AAAAAAAAEcRAA8AAAAAAAAAf//8AAAAAAAARxEADwAAAAAAAAB///wAAAAAAABHEQAPAAAAAAAAAB8AAAAAAAAAAEcRAA8AAAAAAAAAOAAAAAAAAAAARxEADwAAAAAAAABwAAAAAAAAAABHEQAPAAAAAAAAAHAAAAAAAAAAAEcRAA8AAAAAAAAAcAAAAAAAAAAARxEADwAAAAAAAABwAAAAAAAAAABHEQAPAAAAAAAAAHgAAAAAAAAAAEcRAA8AAAAAAAAAIAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAAGg=='
        )

    def test_12mm_white_tape_raster(self):
        """Test Brother raster output for 12mm white tape"""
        png, spec = create_label_png("WhiteRaster", 50, "W12", 15)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(
            matrix, spec, hi_res=True, feed_mm=1
        )

        # Verify raster format basics
        assert isinstance(raster, bytes)
        assert len(raster) > 1000
        assert raster.startswith(b"\x00" * 400)

        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshot(
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtAG2lhARtpeoQADACqAgAAAAAb"
            "aU1AG2lBARtpS0wbaWQOAE0CRxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAA4AAAAAAAAAAAABHEQAPAAAAAAAD+AAAAAAAAAAAAEcR"
            "AA8AAAAAAAP/gAAAAAAAAAAARxEADwAAAAAAA//4AAAAAAAAAABHEQAPAAAAAAAD//+AAAAAAAAAAEcR"
            "AA8AAAAAAAAf//AAAAAAAAAARxEADwAAAAAAAAH//wAAAAAAAABHEQAPAAAAAAAAAB//8AAAAAAAAEcR"
            "AA8AAAAAAAAAAP//AAAAAAAARxEADwAAAAAAAAAAD//AAAAAAABHEQAPAAAAAAAAAAAA/8AAAAAAAEcR"
            "AA8AAAAAAAAAAAAPwAAAAAAARxEADwAAAAAAAAAAAH/AAAAAAABHEQAPAAAAAAAAAAAH/8AAAAAAAEcR"
            "AA8AAAAAAAAAAH//AAAAAAAARxEADwAAAAAAAAAD//AAAAAAAABHEQAPAAAAAAAAAD//gAAAAAAAAEcR"
            "AA8AAAAAAAAD//gAAAAAAAAARxEADwAAAAAAAB//wAAAAAAAAABHEQAPAAAAAAAB//wAAAAAAAAAAEcR"
            "AA8AAAAAAAP/wAAAAAAAAAAARxEADwAAAAAAA/4AAAAAAAAAAABHEQAPAAAAAAAD4AAAAAAAAAAAAEcR"
            "AA8AAAAAAAP8AAAAAAAAAAAARxEADwAAAAAAA//AAAAAAAAAAABHEQAPAAAAAAAD//gAAAAAAAAAAEcR"
            "AA8AAAAAAAB//4AAAAAAAAAARxEADwAAAAAAAAf/8AAAAAAAAABHEQAPAAAAAAAAAH//AAAAAAAAAEcR"
            "AA8AAAAAAAAAD//wAAAAAAAARxEADwAAAAAAAAAA//4AAAAAAABHEQAPAAAAAAAAAAAf/8AAAAAAAEcR"
            "AA8AAAAAAAAAAAD/wAAAAAAARxEADwAAAAAAAAAAAA/AAAAAAABHEQAPAAAAAAAAAAAA/8AAAAAAAEcR"
            "AA8AAAAAAAAAAA//wAAAAAAARxEADwAAAAAAAAAA//4AAAAAAABHEQAPAAAAAAAAAA//8AAAAAAAAEcR"
            "AA8AAAAAAAAA//8AAAAAAAAARxEADwAAAAAAAA//8AAAAAAAAABHEQAPAAAAAAAA//+AAAAAAAAAAEcR"
            "AA8AAAAAAAP/+AAAAAAAAAAARxEADwAAAAAAA/+AAAAAAAAAAABHEQAPAAAAAAAD/AAAAAAAAAAAAEcR"
            "AA8AAAAAAAPAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAD/////8AAAAAAAEcR"
            "AA8AAAAAAAP/////wAAAAAAARxEADwAAAAAAA//////AAAAAAABHEQAPAAAAAAAD/////8AAAAAAAEcR"
            "AA8AAAAAAAP/////wAAAAAAARxEADwAAAAAAAAA+AAAAAAAAAABHEQAPAAAAAAAAAHgAAAAAAAAAAEcR"
            "AA8AAAAAAAAA8AAAAAAAAAAARxEADwAAAAAAAADwAAAAAAAAAABHEQAPAAAAAAAAAeAAAAAAAAAAAEcR"
            "AA8AAAAAAAAB4AAAAAAAAAAARxEADwAAAAAAAAHgAAAAAAAAAABHEQAPAAAAAAAAAeAAAAAAAAAAAEcR"
            "AA8AAAAAAAAB4AAAAAAAAAAARxEADwAAAAAAAAHwAAAAAAAAAABHEQAPAAAAAAAAAfAAAAAAAAAAAEcR"
            "AA8AAAAAAAAA/AAAAAAAAAAARxEADwAAAAAAAAD////AAAAAAABHEQAPAAAAAAAAAH///8AAAAAAAEcR"
            "AA8AAAAAAAAAP///wAAAAAAARxEADwAAAAAAAAAf///AAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAPA////wAAAAAAARxEADwAAAAAAA8D////AAAAAAABHEQAPAAAAAAADwP///8AAAAAAAEcR"
            "AA8AAAAAAAPA////wAAAAAAARxEADwAAAAAAA8D////AAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAA8AAAAAAAAAAARxEADwAAAAAAAADwAAAAAAAAAABHEQAPAAAAAAAAAPAAAAAAAAAAAEcR"
            "AA8AAAAAAAB////+AAAAAAAARxEADwAAAAAAAH////8AAAAAAABHEQAPAAAAAAAA/////4AAAAAAAEcR"
            "AA8AAAAAAAD/////wAAAAAAARxEADwAAAAAAAADwAA/AAAAAAABHEQAPAAAAAAAAAPAAA8AAAAAAAEcR"
            "AA8AAAAAAAAA8AADwAAAAAAARxEADwAAAAAAAADwAAPAAAAAAABHEQAPAAAAAAAAAPAAA8AAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAP/AAAAAAAAARxEADwAAAAAAAAAH//AAAAAAAABHEQAPAAAAAAAAAA///AAAAAAAAEcR"
            "AA8AAAAAAAAAP//+AAAAAAAARxEADwAAAAAAAAB//f8AAAAAAABHEQAPAAAAAAAAAH48PwAAAAAAAEcR"
            "AA8AAAAAAAAA+DwPgAAAAAAARxEADwAAAAAAAADwPA+AAAAAAABHEQAPAAAAAAAAAfA8B8AAAAAAAEcR"
            "AA8AAAAAAAAB4DwDwAAAAAAARxEADwAAAAAAAAHgPAPAAAAAAABHEQAPAAAAAAAAAeA8A8AAAAAAAEcR"
            "AA8AAAAAAAAB4DwDwAAAAAAARxEADwAAAAAAAAHgPAPAAAAAAABHEQAPAAAAAAAAAeA8A8AAAAAAAEcR"
            "AA8AAAAAAAAA8DwHwAAAAAAARxEADwAAAAAAAAD4PAeAAAAAAABHEQAPAAAAAAAAAPw8D4AAAAAAAEcR"
            "AA8AAAAAAAAAfjw/gAAAAAAARxEADwAAAAAAAAA//H8AAAAAAABHEQAPAAAAAAAAAB/8fgAAAAAAAEcR"
            "AA8AAAAAAAAAD/w8AAAAAAAARxEADwAAAAAAAAAD/DgAAAAAAABHEQAPAAAAAAAAAAA8AAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAP/////wAAAAAAARxEADwAAAAAAA//////AAAAAAABHEQAPAAAAAAAD/////8AAAAAAAEcR"
            "AA8AAAAAAAP/////wAAAAAAARxEADwAAAAAAA//////AAAAAAABHEQAPAAAAAAADwAPAAAAAAAAAAEcR"
            "AA8AAAAAAAPAA8AAAAAAAAAARxEADwAAAAAAA8ADwAAAAAAAAABHEQAPAAAAAAADwAPAAAAAAAAAAEcR"
            "AA8AAAAAAAPAA8AAAAAAAAAARxEADwAAAAAAA8ADwAAAAAAAAABHEQAPAAAAAAADwAPAAAAAAAAAAEcR"
            "AA8AAAAAAAPAA8AAAAAAAAAARxEADwAAAAAAA8ADwAAAAAAAAABHEQAPAAAAAAADwAPgAAAAAAAAAEcR"
            "AA8AAAAAAAPAA/AAAAAAAAAARxEADwAAAAAAA8AD+AAAAAAAAABHEQAPAAAAAAADwAP8AAAAAAAAAEcR"
            "AA8AAAAAAAPAA/4AAAAAAAAARxEADwAAAAAAA8AH34AAAAAAAABHEQAPAAAAAAAD4AffwAAAAAAAAEcR"
            "AA8AAAAAAAHgD4/wAAAAAAAARxEADwAAAAAAAfAfh/gAAAAAAABHEQAPAAAAAAAB/n8D/gAAAAAAAEcR"
            "AA8AAAAAAAD//wH/AAAAAAAARxEADwAAAAAAAH/+AH/AAAAAAABHEQAPAAAAAAAAP/wAP8AAAAAAAEcR"
            "AA8AAAAAAAAf8AAPwAAAAAAARxEADwAAAAAAAAGAAAfAAAAAAABHEQAPAAAAAAAAAAAAAcAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAQAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAPwAAAAAAABHEQAPAAAAAAAAAA4D/gAAAAAAAEcR"
            "AA8AAAAAAAAAHgf/AAAAAAAARxEADwAAAAAAAAA/D/+AAAAAAABHEQAPAAAAAAAAAH8P/4AAAAAAAEcR"
            "AA8AAAAAAAAA/B8HwAAAAAAARxEADwAAAAAAAAD4HgfAAAAAAABHEQAPAAAAAAAAAPAeA8AAAAAAAEcR"
            "AA8AAAAAAAAB4B4DwAAAAAAARxEADwAAAAAAAAHgHgPAAAAAAABHEQAPAAAAAAAAAeA8A8AAAAAAAEcR"
            "AA8AAAAAAAAB4DwDwAAAAAAARxEADwAAAAAAAAHgPAPAAAAAAABHEQAPAAAAAAAAAeA8B4AAAAAAAEcR"
            "AA8AAAAAAAAB4DwHgAAAAAAARxEADwAAAAAAAAHwPA+AAAAAAABHEQAPAAAAAAAAAfB4HwAAAAAAAEcR"
            "AA8AAAAAAAAA/Hh+AAAAAAAARxEADwAAAAAAAAD///8AAAAAAABHEQAPAAAAAAAAAH///8AAAAAAAEcR"
            "AA8AAAAAAAAAP///wAAAAAAARxEADwAAAAAAAAAf///AAAAAAABHEQAPAAAAAAAAAAAAB8AAAAAAAEcR"
            "AA8AAAAAAAAAAAAAQAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAcAOAAAAAAAAEcR"
            "AA8AAAAAAAAAH8A+AAAAAAAARxEADwAAAAAAAAB/4H8AAAAAAABHEQAPAAAAAAAAAH/wfwAAAAAAAEcR"
            "AA8AAAAAAAAA//gfgAAAAAAARxEADwAAAAAAAADw+A+AAAAAAABHEQAPAAAAAAAAAfD4B8AAAAAAAEcR"
            "AA8AAAAAAAAB4HwDwAAAAAAARxEADwAAAAAAAAHgfAPAAAAAAABHEQAPAAAAAAAAAeB8A8AAAAAAAEcR"
            "AA8AAAAAAAAB4D4DwAAAAAAARxEADwAAAAAAAAHgPgPAAAAAAABHEQAPAAAAAAAAAeA+A8AAAAAAAEcR"
            "AA8AAAAAAAAB8D4DwAAAAAAARxEADwAAAAAAAADwHweAAAAAAABHEQAPAAAAAAAAAPwfD4AAAAAAAEcR"
            "AA8AAAAAAAAA/h/fgAAAAAAARxEADwAAAAAAAAB+D/8AAAAAAABHEQAPAAAAAAAAADwP/gAAAAAAAEcR"
            "AA8AAAAAAAAADAf8AAAAAAAARxEADwAAAAAAAAAAAfgAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAPAAAAAAAAAAAEcR"
            "AA8AAAAAAAAA8AAAAAAAAAAARxEADwAAAAAAAADwAAAAAAAAAABHEQAPAAAAAAAAf////gAAAAAAAEcR"
            "AA8AAAAAAAB/////AAAAAAAARxEADwAAAAAAAP////+AAAAAAABHEQAPAAAAAAAA/////8AAAAAAAEcR"
            "AA8AAAAAAAAA8AAPwAAAAAAARxEADwAAAAAAAADwAAPAAAAAAABHEQAPAAAAAAAAAPAAA8AAAAAAAEcR"
            "AA8AAAAAAAAA8AADwAAAAAAARxEADwAAAAAAAADwAAPAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAD/wAAAAAAAAEcR"
            "AA8AAAAAAAAAB//wAAAAAAAARxEADwAAAAAAAAAP//wAAAAAAABHEQAPAAAAAAAAAD///gAAAAAAAEcR"
            "AA8AAAAAAAAAf/3/AAAAAAAARxEADwAAAAAAAAB+PD8AAAAAAABHEQAPAAAAAAAAAPg8D4AAAAAAAEcR"
            "AA8AAAAAAAAA8DwPgAAAAAAARxEADwAAAAAAAAHwPAfAAAAAAABHEQAPAAAAAAAAAeA8A8AAAAAAAEcR"
            "AA8AAAAAAAAB4DwDwAAAAAAARxEADwAAAAAAAAHgPAPAAAAAAABHEQAPAAAAAAAAAeA8A8AAAAAAAEcR"
            "AA8AAAAAAAAB4DwDwAAAAAAARxEADwAAAAAAAAHgPAPAAAAAAABHEQAPAAAAAAAAAPA8B8AAAAAAAEcR"
            "AA8AAAAAAAAA+DwHgAAAAAAARxEADwAAAAAAAAD8PA+AAAAAAABHEQAPAAAAAAAAAH48P4AAAAAAAEcR"
            "AA8AAAAAAAAAP/x/AAAAAAAARxEADwAAAAAAAAAf/H4AAAAAAABHEQAPAAAAAAAAAA/8PAAAAAAAAEcR"
            "AA8AAAAAAAAAA/w4AAAAAAAARxEADwAAAAAAAAAAPAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAA////wAAAAAAARxEADwAAAAAAAAD////AAAAAAABHEQAPAAAAAAAAAP///8AAAAAAAEcR"
            "AA8AAAAAAAAA////wAAAAAAARxEADwAAAAAAAAA////AAAAAAABHEQAPAAAAAAAAAHwAAAAAAAAAAEcR"
            "AA8AAAAAAAAA8AAAAAAAAAAARxEADwAAAAAAAADwAAAAAAAAAABHEQAPAAAAAAAAAeAAAAAAAAAAAEcR"
            "AA8AAAAAAAAB4AAAAAAAAAAARxEADwAAAAAAAAHgAAAAAAAAAABHEQAPAAAAAAAAAfAAAAAAAAAAAEcR"
            "AA8AAAAAAAAA8AAAAAAAAAAARxEADwAAAAAAAADgAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcR"
            "AA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAAAa"
        )

    def test_raster_no_auto_cut(self):
        """Test Brother raster output with current default cut behavior"""
        png, spec = create_label_png("NoCut", 35, "W6", 10)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(
            matrix, spec, hi_res=True, feed_mm=1
        )

        # Verify raster format
        assert isinstance(raster, bytes)
        assert len(raster) > 1000

        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshot(
tAG2lhARtpeoQABgCqAgAAAAAbaU1AG2lBARtpS0wbaWQOAE0CRxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAH///8AAAAAAAAEcRAA8AAAAAAAAf///wAAAAAAAARxEADwAAAAAAAB////AAAAAAAABHEQAPAAAAAAAAD4AAAAAAAAAAAEcRAA8AAAAAAAAHwAAAAAAAAAAARxEADwAAAAAAAAHwAAAAAAAAAABHEQAPAAAAAAAAAPgAAAAAAAAAAEcRAA8AAAAAAAAAPgAAAAAAAAAARxEADwAAAAAAAAAfAAAAAAAAAABHEQAPAAAAAAAAAAfAAAAAAAAAAEcRAA8AAAAAAAAAA/AAAAAAAAAARxEADwAAAAAAAAAA+AAAAAAAAABHEQAPAAAAAAAAAAB+AAAAAAAAAEcRAA8AAAAAAAAAAB8AAAAAAAAARxEADwAAAAAAAAAAB8AAAAAAAABHEQAPAAAAAAAAAAAD4AAAAAAAAEcRAA8AAAAAAAAf///wAAAAAAAARxEADwAAAAAAAB////AAAAAAAABHEQAPAAAAAAAAH///8AAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAA/AAAAAAAAABHEQAPAAAAAAAAAAP/AAAAAAAAAEcRAA8AAAAAAAAAD//AAAAAAAAARxEADwAAAAAAAAAPh8AAAAAAAABHEQAPAAAAAAAAAB4B4AAAAAAAAEcRAA8AAAAAAAAAHADgAAAAAAAARxEADwAAAAAAAAA4AHAAAAAAAABHEQAPAAAAAAAAADgAcAAAAAAAAEcRAA8AAAAAAAAAOABwAAAAAAAARxEADwAAAAAAAAA4AHAAAAAAAABHEQAPAAAAAAAAADgAcAAAAAAAAEcRAA8AAAAAAAAAPADwAAAAAAAARxEADwAAAAAAAAAeAeAAAAAAAABHEQAPAAAAAAAAAB8D4AAAAAAAAEcRAA8AAAAAAAAAD//AAAAAAAAARxEADwAAAAAAAAAH/4AAAAAAAABHEQAPAAAAAAAAAAH+AAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAA/8AAAAAAAAABHEQAPAAAAAAAAAP/+AAAAAAAAAEcRAA8AAAAAAAAB//8AAAAAAAAARxEADwAAAAAAAAPwH4AAAAAAAABHEQAPAAAAAAAAB8AHwAAAAAAAAEcRAA8AAAAAAAAPAAHgAAAAAAAARxEADwAAAAAAAA4AAOAAAAAAAABHEQAPAAAAAAAADgAA4AAAAAAAAEcRAA8AAAAAAAAcAABwAAAAAAAARxEADwAAAAAAABwAAHAAAAAAAABHEQAPAAAAAAAAHAAAcAAAAAAAAEcRAA8AAAAAAAAcAABwAAAAAAAARxEADwAAAAAAABwAAHAAAAAAAABHEQAPAAAAAAAAHAAAcAAAAAAAAEcRAA8AAAAAAAAeAADwAAAAAAAARxEADwAAAAAAAA4AAOAAAAAAAABHEQAPAAAAAAAADwAB4AAAAAAAAEcRAA8AAAAAAAAHgAPAAAAAAAAARxEADwAAAAAAAAfgH8AAAAAAAABHEQAPAAAAAAAAA+AfgAAAAAAAAEcRAA8AAAAAAAAAwB4AAAAAAAAARxEADwAAAAAAAAAACAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAD//AAAAAAAAAEcRAA8AAAAAAAAAP//AAAAAAAAARxEADwAAAAAAAAA//+AAAAAAAABHEQAPAAAAAAAAAAAD4AAAAAAAAEcRAA8AAAAAAAAAAADwAAAAAAAARxEADwAAAAAAAAAAAHAAAAAAAABHEQAPAAAAAAAAAAAAcAAAAAAAAEcRAA8AAAAAAAAAAABwAAAAAAAARxEADwAAAAAAAAAAAHAAAAAAAABHEQAPAAAAAAAAAAAA4AAAAAAAAEcRAA8AAAAAAAAAAADgAAAAAAAARxEADwAAAAAAAAAAA4AAAAAAAABHEQAPAAAAAAAAAD//8AAAAAAAAEcRAA8AAAAAAAAAP//wAAAAAAAARxEADwAAAAAAAAA///AAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAOAAAAAAAAAAARxEADwAAAAAAAAA4AAAAAAAAAABHEQAPAAAAAAAAB///4AAAAAAAAEcRAA8AAAAAAAAH///gAAAAAAAARxEADwAAAAAAAA////AAAAAAAABHEQAPAAAAAAAAADgAcAAAAAAAAEcRAA8AAAAAAAAAOABwAAAAAAAARxEADwAAAAAAAAA4AHAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAAGg=='
        )

    def test_different_feed_margin(self):
        """Test Brother raster output with different feed margin"""
        png, spec = create_label_png("Feed", 40, "W9", 10)
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(
            matrix, spec, hi_res=True, feed_mm=2
        )

        # Verify raster format
        assert isinstance(raster, bytes)
        assert len(raster) > 1000

        # Snapshot the binary content
        raster_b64 = binary_to_b64(raster)
        assert raster_b64 == snapshot(
tAG2lhARtpeoQACQCqAgAAAAAbaU1AG2lBARtpS0wbaWQcAE0CRxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAf////AAAAAAAAEcRAA8AAAAAAAB////8AAAAAAAARxEADwAAAAAAAH////wAAAAAAABHEQAPAAAAAAAAf////AAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAeAAAAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAeAAAAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAeAAAAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAeAAAAAAAAAAEcRAA8AAAAAAAB4B4AAAAAAAAAARxEADwAAAAAAAHgHgAAAAAAAAABHEQAPAAAAAAAAeAAAAAAAAAAAAEcRAA8AAAAAAAB4AAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAABAAAAAAAAAARxEADwAAAAAAAAAD/4AAAAAAAABHEQAPAAAAAAAAAAf/wAAAAAAAAEcRAA8AAAAAAAAAD//wAAAAAAAARxEADwAAAAAAAAAfc/AAAAAAAABHEQAPAAAAAAAAADxweAAAAAAAAEcRAA8AAAAAAAAAOHA4AAAAAAAARxEADwAAAAAAAAB4cDwAAAAAAABHEQAPAAAAAAAAAHBwHAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAABwcBwAAAAAAABHEQAPAAAAAAAAAHBwHAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAAA4cDwAAAAAAABHEQAPAAAAAAAAADxwOAAAAAAAAEcRAA8AAAAAAAAAHnD4AAAAAAAARxEADwAAAAAAAAAf8PAAAAAAAABHEQAPAAAAAAAAAA/w4AAAAAAAAEcRAA8AAAAAAAAAA/DAAAAAAAAARxEADwAAAAAAAAAAMAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAQAAAAAAAAAEcRAA8AAAAAAAAAA/+AAAAAAAAARxEADwAAAAAAAAAH/8AAAAAAAABHEQAPAAAAAAAAAA//8AAAAAAAAEcRAA8AAAAAAAAAH3PwAAAAAAAARxEADwAAAAAAAAA8cHgAAAAAAABHEQAPAAAAAAAAADhwOAAAAAAAAEcRAA8AAAAAAAAAeHA8AAAAAAAARxEADwAAAAAAAABwcBwAAAAAAABHEQAPAAAAAAAAAHBwHAAAAAAAAEcRAA8AAAAAAAAAcHAcAAAAAAAARxEADwAAAAAAAABwcBwAAAAAAABHEQAPAAAAAAAAAHBwHAAAAAAAAEcRAA8AAAAAAAAAOHA8AAAAAAAARxEADwAAAAAAAAA8cDgAAAAAAABHEQAPAAAAAAAAAB5w+AAAAAAAAEcRAA8AAAAAAAAAH/DwAAAAAAAARxEADwAAAAAAAAAP8OAAAAAAAABHEQAPAAAAAAAAAAPwwAAAAAAAAEcRAA8AAAAAAAAAADAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAADgAAAAAAAAARxEADwAAAAAAAAAD/4AAAAAAAABHEQAPAAAAAAAAAA//4AAAAAAAAEcRAA8AAAAAAAAAH//wAAAAAAAARxEADwAAAAAAAAA/AfAAAAAAAABHEQAPAAAAAAAAADwAeAAAAAAAAEcRAA8AAAAAAAAAeAA8AAAAAAAARxEADwAAAAAAAABwABwAAAAAAABHEQAPAAAAAAAAAHAAHAAAAAAAAEcRAA8AAAAAAAAAcAAcAAAAAAAARxEADwAAAAAAAABwABwAAAAAAABHEQAPAAAAAAAAAHAAHAAAAAAAAEcRAA8AAAAAAAAAOAA4AAAAAAAARxEADwAAAAAAAAAcAHgAAAAAAABHEQAPAAAAAAAAAB8A8AAAAAAAAEcRAA8AAAAAAAB////8AAAAAAAARxEADwAAAAAAAH////wAAAAAAABHEQAPAAAAAAAAf////AAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAABHEQAPAAAAAAAAAAAAAAAAAAAAAEcRAA8AAAAAAAAAAAAAAAAAAAAARxEADwAAAAAAAAAAAAAAAAAAAAAa'
        )


class TestAllTapeSizes:
    """Test all supported tape sizes"""

    @pytest.mark.parametrize("tape_key", list(TAPE_SPECS.keys()))
    def test_all_tape_sizes_png(self, tape_key):
        """Test PNG generation for all tape sizes"""
        png, spec = create_label_png("Test", 35, tape_key, 10)

        # Verify correct tape height
        expected_height = TAPE_SPECS[tape_key]["pins"]
        assert png.size[1] == expected_height
        assert spec["mm"] == TAPE_SPECS[tape_key]["mm"]

        # Verify we can generate a matrix and raster
        matrix = png_to_bw_matrix(png)
        raster = convert_to_brother_raster(matrix, spec)

        assert isinstance(raster, bytes)
        assert len(raster) > 500  # Should have substantial content


class TestSymmetricCentering:
    """Test that text is perfectly centered"""

    def test_centering_consistency(self):
        """Test that centering is mathematically consistent"""
        # Create two identical labels with different margins
        png1, _ = create_label_png("Center", 40, "W6", 10)
        png2, _ = create_label_png("Center", 40, "W6", 20)

        # Convert to matrices
        matrix1 = png_to_bw_matrix(png1)
        matrix2 = png_to_bw_matrix(png2)

        # Both should have identical text positioning relative to their margins
        # The text portion should be identical, just with different margin sizes
        assert matrix1["height"] == matrix2["height"]  # Same tape height
        assert (
            matrix1["width"] + 20 == matrix2["width"]
        )  # Width difference = margin difference * 2

        # For black tape, verify the images have consistent structure
        # (Text pixels are white=0, background pixels are black=1)
        # The ink-based measurement should ensure consistent glyph rendering
        assert matrix1["width"] > 0
        assert matrix2["width"] > 0
        assert matrix1["height"] == 32  # 6mm tape height


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
